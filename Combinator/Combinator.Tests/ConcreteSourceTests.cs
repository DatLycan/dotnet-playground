// <auto-generated/>
namespace Combinator.Tests;

using Combinator.Core;
using NUnit.Framework;

public class ConcreteSourceTests
{
  private record TestSource(int Amount, bool IsActive);

  [TestCase(5, true, true, TestName = "Amount_Is_Between_4_And_6_And_Is_Active_Is_True_Returns_True")]
  [TestCase(4, true, false, TestName = "Amount_Is_4_And_Is_Active_Is_True_Returns_False")]
  [TestCase(6, true, false, TestName = "Amount_Is_6_And_Is_Active_Is_True_Returns_False")]
  [TestCase(5, false, false, TestName = "Amount_Is_5_And_Is_Active_Is_False_Returns_False")]
  public void ConcreteSourceWhereAndReturnsExpectedResult(
    int amount,
    bool isActive,
    bool expected
  )
  {
    var combinatorChain = Combinator
      .Where<TestSource>(source => source.Amount > 4)
      .And(source => source.Amount < 6)
      .And(source => source.IsActive is true)
      .Build();

    var result = combinatorChain(new TestSource(amount, isActive));
    Assert.That(result, Is.EqualTo(expected));
  }
}
