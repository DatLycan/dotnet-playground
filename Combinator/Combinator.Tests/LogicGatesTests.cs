// <auto-generated/>
namespace Combinator.Tests;

using Combinator.Core;
using NUnit.Framework;

public class LogicGatesTests
{
  [TestCase(true, true, true, TestName = "True_And_True_Returns_True")]
  [TestCase(true, false, false, TestName = "True_And_False_Returns_False")]
  [TestCase(false, true, false, TestName = "False_And_True_Returns_False")]
  [TestCase(false, false, false, TestName = "False_And_False_Returns_False")]
  public void AndTest(bool first, bool second, bool expected)
  {
    var result = Combinator
      .Where<object>(_ => first)
      .And(_ => second)
      .Using(default);

    Assert.That(result, Is.EqualTo(expected));
  }

  [TestCase(true, true, true, TestName = "True_Or_True_Returns_True")]
  [TestCase(true, false, true, TestName = "True_Or_False_Returns_True")]
  [TestCase(false, true, true, TestName = "False_Or_True_Returns_True")]
  [TestCase(false, false, false, TestName = "False_Or_False_Returns_False")]
  public void OrTest(bool first, bool second, bool expected)
  {
    var result = Combinator
      .Where<object>(_ => first)
      .Or(_ => second)
      .Using(default);

    Assert.That(result, Is.EqualTo(expected));
  }

  [TestCase(true, false, TestName = "Not_True_Returns_False")]
  [TestCase(false, true, TestName = "Not_False_Returns_True")]
  public void NotTest(bool input, bool expected)
  {
    var result = Combinator
      .Where<object>(_ => input)
      .Not()
      .Using(default);

    Assert.That(result, Is.EqualTo(expected));
  }
}